<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.3">
  <classes>
    <class id="Communication" _delta="define">
      <properties>
        <category>bizmodel,searchable</category>
        <abstract>false</abstract>
        <db_table>communication</db_table>
        <icon>
          <fileref ref="communication_90109793268989a4709622ad7341c32d"/>
        </icon>
        <reconciliation>
          <attributes>
            <attribute id="org_id"/>
            <attribute id="org_name"/>
            <attribute id="ref"/>
          </attributes>
        </reconciliation>
        <naming>
          <attributes>
            <attribute id="ref"/>
          </attributes>
        </naming>
      </properties>
      <fields>
        <field id="ref" xsi:type="AttributeString">
          <sql>ref</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
          <validation_pattern/>
        </field>
        <field id="start_date" xsi:type="AttributeDateTime">
          <sql>start_date</sql>
          <default_value/>
          <is_null_allowed>false</is_null_allowed>
        </field>
        <field id="end_date" xsi:type="AttributeDateTime">
          <sql>end_date</sql>
          <default_value/>
          <is_null_allowed>false</is_null_allowed>
        </field>
        <field id="status" xsi:type="AttributeEnum">
          <sql>status</sql>
          <values>
            <value id="ongoing">ongoing</value>
            <value id="closed">closed</value>
          </values>
          <default_value>ongoing</default_value>
          <is_null_allowed>false</is_null_allowed>
          <display_style>list</display_style>
        </field>
        <field id="org_id" xsi:type="AttributeExternalKey">
          <sql>org_id</sql>
          <filter/>
          <dependencies/>
          <is_null_allowed>false</is_null_allowed>
          <target_class>Organization</target_class>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="org_name" xsi:type="AttributeExternalField">
          <extkey_attcode>org_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="icon" xsi:type="AttributeEnum">
          <sql>icon</sql>
          <values>
            <value id="none">none</value>
            <value id="information">information</value>
            <value id="warning">warning</value>
            <value id="tip">tip</value>
            <value id="scoop">scoop</value>
          </values>
          <default_value>none</default_value>
          <is_null_allowed>false</is_null_allowed>
          <display_style>list</display_style>
        </field>
        <field id="title" xsi:type="AttributeString">
          <sql>title</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
          <validation_pattern/>
        </field>
        <field id="message" xsi:type="AttributeHTML">
          <sql>message</sql>
          <default_value/>
          <is_null_allowed>false</is_null_allowed>
          <validation_pattern/>
          <width/>
          <height/>
        </field>
        <field id="organizations_list" xsi:type="AttributeLinkedSetIndirect">
          <linked_class>lnkCommunicationToOrganization</linked_class>
          <ext_key_to_me>communication_id</ext_key_to_me>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <ext_key_to_remote>org_id</ext_key_to_remote>
          <duplicates/>
        </field>
        <field id="org_match_type" xsi:type="AttributeEnum">
          <sql>org_match_type</sql>
          <values>
            <value id="direct">direct</value>
            <value id="cascade">cascade</value>
            <value id="oql">oql</value>
          </values>
          <default_value>cascade</default_value>
          <is_null_allowed>false</is_null_allowed>
          <display_style>list</display_style>
        </field>
        <field id="org_oql" xsi:type="AttributeOQL">
          <sql>org_oql</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
          <width/>
          <height/>
          <tracking_level>all</tracking_level>
        </field>
      </fields>
      <lifecycle>
        <attribute>status</attribute>
        <highlight_scale>
        </highlight_scale>
        <states>
          <state id="ongoing">
            <flags>
              <attribute id="end_date"/>
              <attribute id="message">
                <mandatory/>
              </attribute>
              <attribute id="org_id">
                <mandatory/>
              </attribute>
              <attribute id="ref">
                <hidden/>
              </attribute>
              <attribute id="start_date">
                <mandatory/>
              </attribute>
              <attribute id="end_date">
                <must_prompt/>
              </attribute>
            </flags>
            <transitions>
              <transition id="ev_close">
                <stimulus>ev_close</stimulus>
                <target>closed</target>
                <actions>
                  <action>
                    <verb>SetCurrentDate</verb>
                    <params>
                      <param xsi:type="attcode">end_date</param>
                    </params>
                  </action>
                </actions>
              </transition>
            </transitions>
          </state>
          <state id="closed">
            <inherit_flags_from>ongoing</inherit_flags_from>
            <flags>
              <attribute id="end_date">
                <read_only/>
              </attribute>
              <attribute id="message">
                <read_only/>
              </attribute>
              <attribute id="org_id">
                <read_only/>
              </attribute>
              <attribute id="start_date">
                <read_only/>
              </attribute>
              <attribute id="ref">
                <read_only/>
              </attribute>
              <attribute id="organizations_list">
                <read_only/>
              </attribute>
              <attribute id="org_match_type">
                <read_only/>
              </attribute>
              <attribute id="org_oql">
                <read_only/>
              </attribute>
            </flags>
            <transitions>
              <transition id="ev_reopen">
                <stimulus>ev_reopen</stimulus>
                <target>ongoing</target>
                <actions></actions>
              </transition>
            </transitions>
          </state>
        </states>
        <stimuli>
          <stimulus id="ev_close" xsi:type="StimulusUserAction"/>
          <stimulus id="ev_reopen" xsi:type="StimulusUserAction"/>
        </stimuli>
      </lifecycle>
      <methods>
        <method id="DBInsertNoReload">
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
    public function DBInsertNoReload()
    {
          // N°2407: Temp. backward compatibility with iTop 2.6 and older
          // Remove usage of iTopMutex / MetaModel::GetNextKey() in next functional version of the extension
          if (!is_callable(array('ItopCounter', 'IncClass')))
          {
            $oMutex = new iTopMutex('communication_insert');
            $oMutex->Lock();
            $iCounter = MetaModel::GetNextKey(get_class($this));
          }
          else
          {
            $iCounter = ItopCounter::IncClass(get_class($this));
          }

          $sRef = sprintf('COM-%06d', $iCounter);
          $this->Set('ref', $sRef);
          $iKey = parent::DBInsertNoReload();

          // N°2407: Temp. backward compatibility with iTop 2.6 and older
          // Remove usage of iTopMutex / MetaModel::GetNextKey() in next functional version of the extension
          if (!is_callable(array('ItopCounter', 'IncClass')))
          {
            $oMutex->Unlock();
          }

          return $iKey;
    }
        ]]></code>
        </method>
        <method id="IsUserInScope">
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <comment><![CDATA[/**
	 * Override to filter the communications
	 * @param User $oUser User account to check
	 * @return bool
	 */]]></comment>
          <code><![CDATA[    public function IsUserInScope(User $oUser)
    {
		// Is the user org within the target organizations
		$iContact = $oUser->Get('contactid');
		$oContact = MetaModel::GetObject('Contact', $iContact, true, true);
		$iUserOrg = $oContact->Get('org_id');
		$sMatchType = $this->Get('org_match_type');
        $bRet = false;

		if ($sMatchType === 'oql') {
		    // Target organizations defined as an OQL
    		$oOrgSearch = DBSearch::FromOQL_AllData($this->Get('org_oql'));
    		$oOrgSet = new DBObjectSet($oOrgSearch, array(), array());
    		$aTargetOrgs = $oOrgSet->GetColumnAsArray('id');
		    $bRet = in_array($iUserOrg, $aTargetOrgs);
		}
		else {
		    // Target organizations are those linked to the Communication
			$oOrgSearch = DBSearch::FromOQL_AllData('SELECT lnkCommunicationToOrganization WHERE communication_id = :communication_id');
		    $oOrgSet = new DBObjectSet($oOrgSearch, array(), array('communication_id' => $this->GetKey()));
		    $aTargetOrgs = $oOrgSet->GetColumnAsArray('org_id');
		    if (count($aTargetOrgs) == 0) {
		        // Target organizations are "All organizations" when none are explicitly linked to the Communication
			    $bRet = true;
		    }
		    elseif ($sMatchType === 'direct') {
    			// Target organizations are those directly linked to the communication
    			$bRet = in_array($iUserOrg, $aTargetOrgs);
			}
    		else { // ($sMatchType === 'cascade')
    		    // Target organizations are those directly linked to the communication or one of their sub-organizations
        		$oOrgHierarchical = DBSearch::FromOQL_AllData('SELECT Organization AS child JOIN Organization AS root ON child.parent_id BELOW root.id WHERE root.id IN (:target_org_list) AND child.id = :contact_org_id');
        		$oOrgHSet = new DBObjectSet($oOrgHierarchical, array(), array('contact_org_id' => $iUserOrg, 'target_org_list' => $aTargetOrgs));
        		$bRet = $oOrgHSet->Count() > 0;
    		}
    	}
		return $bRet;
    }
        ]]></code>
        </method>
        <method id="GetFontAwesomeIcon">
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <comment><![CDATA[/**
	 * Override to change the icons
	 * @return string
	 */]]></comment>
          <code><![CDATA[    public function GetFontAwesomeIcon()
    {
		switch ($this->Get('icon'))
		{
			case 'information':
				$sIcon = 'info-circle';
				break;
			case 'warning':
				$sIcon = 'exclamation-triangle';
				break;
			case 'scoop':
				$sIcon = 'bullhorn';
				break;
			case 'tip':
				$sIcon = 'lightbulb';
				break;
			default:
				$sIcon = '';
		}
		return $sIcon;
    }
        ]]></code>
        </method>
        <method id="GetColorFromIcon">
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <comment><![CDATA[/**
	 * Override to change colors in backoffice
	 * @return string
	 */]]></comment>
          <code><![CDATA[    public function GetColorFromIcon()
    {
		switch ($this->Get('icon'))
		{
			case 'information':
				$sColor = Combodo\iTop\Application\UI\Base\Component\Alert\Alert::ENUM_COLOR_SCHEME_INFORMATION;
				break;
			case 'warning':
				$sColor = Combodo\iTop\Application\UI\Base\Component\Alert\Alert::ENUM_COLOR_SCHEME_WARNING;
				break;
			case 'scoop':
				$sColor = Combodo\iTop\Application\UI\Base\Component\Alert\Alert::ENUM_COLOR_SCHEME_NEUTRAL;
				break;
			case 'tip':
				$sColor = Combodo\iTop\Application\UI\Base\Component\Alert\Alert::ENUM_COLOR_SCHEME_SUCCESS;
				break;
			default:
				$sColor = Combodo\iTop\Application\UI\Base\Component\Alert\Alert::ENUM_COLOR_SCHEME_NEUTRAL;
		}
		return $sColor;
    }
        ]]></code>
        </method>
        <method id="DoCheckToWrite">
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[public function DoCheckToWrite()
    {
      parent::DoCheckToWrite();
      if ($this->Get('start_date') > $this->Get('end_date')) {
          $this->m_aCheckIssues[] = Dict::S('Class:Communication/Error:EndDateMustBeGreaterThanStartDate');
      }
      $sOql = $this->Get('org_oql');
      if ($this->Get('org_match_type') === 'oql') {
          if (empty($sOql)) {
              $this->m_aCheckIssues[] = Dict::S('Class:Communication/Error:OQLMustBeProvided');
          } else {
              try {
                  $oSearch = DBObjectSearch::FromOQL($sOql);
                  $sOqlClass = $oSearch->GetClass();
                  if ($sOqlClass !== 'Organization') {
                      $this->m_aCheckIssues[] = Dict::S('Class:Communication/Error:OQLMustReturnOrganization');
                  }
              } catch(Exception $e) {
                  $this->m_aCheckIssues[] = Dict::Format('Class:Communication/Error:OQLNotValid', $e->getMessage());
              }
          }
      } elseif (!empty($sOql)) {
          $this->m_aCheckWarnings[] = Dict::S('Class:Communication/Warning:OQLProvidedButUnused');
          if (count($this->Get('organizations_list'))<1) {
              $this->m_aCheckWarnings[] = Dict::S('Class:Communication/Warning:NoOrgSoAll');
          }
      }
    }]]></code>
        </method>
        <method id="DisplayBareRelations">
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[public function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
    {
        parent::DisplayBareRelations($oPage, $bEditMode);
        $sMatchType = $this->Get('org_match_type');
        if (!$bEditMode) {
            $iKey = $this->GetKey();
            $aParams = array(
                'menu' => true,
                'table_id' => 'communication_preview_orgs_'.$iKey,
                'panel_icon' => MetaModel::GetClassIcon('Organization', false)
            );
            if ($sMatchType === 'oql') { // Result of OQL query regardless of user rights
                $oSearch = DBSearch::FromOQL_AllData($this->Get('org_oql'));
                $aParams['panel_title'] = Dict::S('Class:Communication/Attribute:org_match_type/Value:oql+');
            } elseif (count($this->Get('organizations_list')) == 0) { // All organizations visible to the current user
        		$oSearch = DBSearch::FromOQL('SELECT Organization');
        		$aParams['panel_title'] =Dict::S('Class:Communication/Tab:PreviewAll');
            } elseif ($sMatchType === 'direct') { // All Target organizations regardless of user rights
        		$oSearch = DBSearch::FromOQL_AllData('SELECT Organization AS O JOIN lnkCommunicationToOrganization AS L ON L.org_id=O.id WHERE L.communication_id = '.$iKey);
        		$aParams['panel_title'] = Dict::S('Class:Communication/Attribute:org_match_type/Value:direct+');
            } elseif ($sMatchType === 'cascade') {  // All Target organizations and any organization below regardless of user rights
        		$oSearch = DBSearch::FromOQL_AllData('SELECT Organization AS child JOIN Organization AS root ON child.parent_id BELOW root.id WHERE root.id IN (SELECT Organization AS O JOIN lnkCommunicationToOrganization AS L ON L.org_id=O.id WHERE L.communication_id = '.$iKey.')');
        		$aParams['panel_title'] = Dict::S('Class:Communication/Attribute:org_match_type/Value:cascade+');
            }
            $oSet = new DBObjectSet($oSearch);
            $oSet->SetShowObsoleteData(utils::ShowObsoleteData());
            $iCount = $oSet->CountWithLimit(100);
            $sCount = ($iCount == 100) ? '99+': $iCount;
            $oPage->SetCurrentTab(Dict::S('Class:Communication/Tab:Preview').' ('.$sCount.')');
            $oBlock = new DisplayBlock($oSearch, 'list', true);
            $oBlock->Display($oPage, 'communication_preview_'.$iKey, $aParams);
        }
    }
            ]]>
          </code>
        </method>
        <method id="IsAllowedPortalsValid">
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[	public function IsAllowedPortalsValid($sPortalToCheck = null)
	{
		// Check the context
		$oAllowedPortals = $this->Get('allowed_portals');
		$bChecked = false;
		$bValid = false;
		foreach ($oAllowedPortals->GetValues() as $sValue)
		{
			$bChecked = true;
			if (ContextTag::Check($sValue) || (isset($sPortalToCheck) && $sPortalToCheck === $sValue))
			{
				$bValid = true;
				break;
			}
		}
		if ($bChecked && !$bValid)
		{
			return false;
		}
		return true;
	}
]]></code>
        </method>
        <method id="PrefillCreationForm">
          <static>false</static>
          <type>Overload-DBObject</type>
          <code><![CDATA[
    public function PrefillCreationForm(&$aContextParam)
    {
      $this->Set('allowed_portals', ContextTag::TAG_PORTAL);
  
      parent::PrefillCreationForm($aContextParam);
    }
            ]]></code>
        </method>
      </methods>
      <presentation>
        <list>
          <items>
            <item id="org_id">
              <rank>20</rank>
            </item>
            <item id="start_date">
              <rank>30</rank>
            </item>
            <item id="end_date">
              <rank>40</rank>
            </item>
            <item id="status">
              <rank>50</rank>
            </item>
            <item id="icon">
              <rank>60</rank>
            </item>
          </items>
        </list>
        <search>
          <items>
            <item id="ref">
              <rank>10</rank>
            </item>
            <item id="org_id">
              <rank>20</rank>
            </item>
            <item id="status">
              <rank>30</rank>
            </item>
            <item id="start_date">
              <rank>40</rank>
            </item>
            <item id="end_date">
              <rank>50</rank>
            </item>
            <item id="icon">
              <rank>60</rank>
            </item>
          </items>
        </search>
        <details>
          <items>
            <item id="col:col0">
              <items>
                <item id="ref">
                  <rank>10</rank>
                </item>
                <item id="org_id">
                  <rank>20</rank>
                </item>
                <item id="status">
                  <rank>30</rank>
                </item>
                <item id="start_date">
                  <rank>50</rank>
                </item>
                <item id="end_date">
                  <rank>60</rank>
                </item>
                <item id="org_match_type">
                  <rank>70</rank>
                </item>
                <item id="org_oql" _delta="define">
                  <rank>80</rank>
                </item>
                <item id="allowed_portals">
                  <rank>90</rank>
                </item>
              </items>
              <rank>10</rank>
            </item>
            <item id="col:col1">
              <items>
                <item id="icon">
                  <rank>10</rank>
                </item>
                <item id="title">
                  <rank>20</rank>
                </item>
                <item id="message">
                  <rank>30</rank>
                </item>
              </items>
              <rank>20</rank>
            </item>
            <item id="organizations_list">
                <rank>80</rank>
            </item>
          </items>
        </details>
      </presentation>
      <parent>cmdbAbstractObject</parent>
    </class>
    <class id="lnkCommunicationToOrganization" _delta="define">
      <parent>cmdbAbstractObject</parent>
      <properties>
        <is_link>1</is_link>
        <category>bizmodel</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>lnkcommunicationtoorganization</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="communication_ref"/>
            <attribute id="org_name"/>
          </attributes>
        </naming>
        <display_template/>
        <icon/>
        <reconciliation>
          <attributes>
            <attribute id="communication_id"/>
            <attribute id="org_id"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules>
          <rule id="no_duplicate">
            <attributes>
              <attribute id="org_id"/>
              <attribute id="communication_id"/>
            </attributes>
            <filter><![CDATA[]]></filter>
            <disabled>false</disabled>
            <is_blocking>true</is_blocking>
          </rule>
        </uniqueness_rules>
      </properties>
      <fields>
        <field id="org_id" xsi:type="AttributeExternalKey">
          <sql>org_id</sql>
          <target_class>Organization</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="org_name" xsi:type="AttributeExternalField">
          <extkey_attcode>org_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="communication_id" xsi:type="AttributeExternalKey">
          <sql>communication_id</sql>
          <target_class>Communication</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="communication_ref" xsi:type="AttributeExternalField">
          <extkey_attcode>communication_id</extkey_attcode>
          <target_attcode>ref</target_attcode>
        </field>
      </fields>
      <methods/>
      <presentation>
        <details>
          <items>
            <item id="communication_id">
              <rank>10</rank>
            </item>
            <item id="org_id">
              <rank>20</rank>
            </item>
          </items>
        </details>
        <search>
          <items>
            <item id="communication_id">
              <rank>10</rank>
            </item>
            <item id="org_id">
              <rank>20</rank>
            </item>
          </items>
        </search>
        <list>
          <items>
            <item id="communication_id">
              <rank>10</rank>
            </item>
            <item id="org_id">
              <rank>20</rank>
            </item>
          </items>
        </list>
      </presentation>
    </class>
  </classes>
  <menus>
    <menu xsi:type="OQLMenuNode" id="Communication" _delta="define">
      <parent>ServiceManagement</parent>
      <rank>15</rank>
      <oql>SELECT Communication WHERE status != "closed"</oql>
      <do_search>1</do_search>
    </menu>
  </menus>
  <files>
    <file id="communication_90109793268989a4709622ad7341c32d" xsi:type="File" _delta="define_if_not_exists">
      <name>communication.png</name>
      <mime_type>image/png</mime_type>
      <width>48</width>
      <height>48</height>
      <data>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</data>
    </file>
  </files>
  <user_rights>
    <groups>
      <group id="Communication" _delta="define">
        <classes>
          <class id="Communication"/>
        </classes>
      </group>
    </groups>
    <profiles>
      <profile id="107" _delta="define">
        <name>Communication Manager</name>
        <description>Person responsible for managing communications to the customers</description>
        <groups>
          <group id="Communication">
            <actions>
              <action id="action:write">allow</action>
              <action id="action:bulk write">allow</action>
              <action id="action:delete">allow</action>
              <action id="action:bulk delete">allow</action>
              <action id="stimulus:ev_close">allow</action>
              <action id="stimulus:ev_reopen">allow</action>
              <action id="action:bulk read">allow</action>
            </actions>
          </group>
          <group id="*">
            <actions>
              <action id="action:read">allow</action>
            </actions>
          </group>
        </groups>
      </profile>
    </profiles>
  </user_rights>
  <module_designs>
    <module_design id="itop-portal" xsi:type="portal" _delta="if_exists">
      <bricks>
        <brick id="communication" xsi:type="Combodo\iTop\Portal\Brick\CommunicationBrick" _delta="define">
          <!-- Should be the class name (eg : CommunicationBrick) -->
          <active>true</active>
          <!-- yes|no -->
          <rank>1</rank>
          <!-- float -->
          <height>15</height>
          <!-- integer , size in em -->
          <width>12</width>
          <!-- integer , must be between 1 and 12 -->
          <title>Portal:Communications</title>
          <!-- string -->
          <oql></oql>
          <!-- Query for the displayed communications (if authorized to the current user, see Communication::IsAllowedToUser). Leave empty to preserve the default behavior. Use :now instead of NOW(). -->
          <security>
            <!-- Order is deny/allow Pseudo OQL traduction : WHERE user_profile NOT IN (:denied_profiles) AND user_profile IN (:allowed_profiles) -->
            <denied_profiles/>
            <!-- OQL query. Used only when not empty -->
            <allowed_profiles/>
            <!-- OQL query. Used only when not empty -->
          </security>
        </brick>
      </bricks>
    </module_design>
  </module_designs>
  <snippets>
    <snippet id="_Communication" _delta="define">
      <placement>module</placement>
      <module>itop-communications</module>
      <rank>2</rank>
      <content>
        <![CDATA[
abstract class _Communication extends cmdbAbstractObject
{
	/**
	 * @throws \CoreException
	 */
	public static function Init()
	{	
		$aParams = array
		(
			"category"            => "",
			"key_type"            => "autoincrement",
			"name_attcode"        => "",
			"state_attcode"       => "",
			"reconc_keys"         => array(),
			"db_table"            => "_communication",
			"db_key_field"        => "id",
			"db_finalclass_field" => "realclass",
		);
		MetaModel::Init_Params($aParams);
		
	
    // - Declare an attribute for class Communication in PHP as we need all declared portals in runtime
		$aAllTags = ContextTag::GetTags();
		$aPortalTags = array('Login' => 'Login');
		foreach($aAllTags as $sTagKey => $sTagValue){
			if(substr($sTagKey, 0, 4) === 'GUI:' || substr($sTagKey, 0, 7) === 'Portal:'){
				$aPortalTags[$sTagKey] = $sTagValue;
			}
		}

		MetaModel::Init_AddAttribute( new AttributeEnumSet("allowed_portals", array("allowed_values" => null, "possible_values" => new ValueSetEnumPadded($aPortalTags), "sql" => "allowed_portals", "depends_on" => array(), "is_null_allowed" => true, "max_items" => 12)), 'Communication');
	}
}
        ]]>
      </content>
    </snippet>
  </snippets>
</itop_design>
